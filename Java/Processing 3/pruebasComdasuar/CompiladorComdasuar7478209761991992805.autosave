import java.util.regex.*;

class CompiladorComdasuar {

  DiccionarioComdasuar Codigo;
  String textoDeEntrada = "";
  String textoDeEntradaFormateado="";

  ArrayList <String> EVENTOS;
  ArrayList <String> AsuarSeqNota;
  ArrayList <String> AsuarSeqDur;

  ArrayList <String> seqMidinotes;
  ArrayList <String> seqMs;
  ArrayList <String> seqOnsets;

  float ultimaNota, ultimaDur, ultimaOct, ultimoRitmo;
  String ultimaAlt, ultimoRit;

  String J1duracionConst = "";
  String J2alturaConst = "";
  int J4repeticiones = 0;
  int J5indxDesde = 0;
  int J5indxHasta = 0;
  int JMODO_ACTIVO = 0;
  boolean J2_ACTIVE = false;
  boolean J1_ACTIVE = false;
  boolean J4_ACTIVE = false;
  int J4indxDesde = 0;
  int J4indxHasta = 0;
  ArrayList <String> J4alt;
  ArrayList <String> J4dur;

  float tempoIndx=1.;

  CompiladorComdasuar() {

    Codigo = new DiccionarioComdasuar();

    this.AsuarSeqNota = new ArrayList<String>(); 
    this.AsuarSeqDur = new ArrayList<String>();

    this.seqMidinotes = new ArrayList<String>(); 
    this.seqMs = new ArrayList<String>(); 
    this.seqOnsets = new ArrayList<String>();

    this.JMODO_ACTIVO = 0; 
    this.J2_ACTIVE = false; 
    this.J1_ACTIVE = false; 
    this.J4_ACTIVE = false;

    this.J5indxDesde = 0; 
    this.J5indxHasta = 0; 
    this.J4indxDesde = 0;
    this.J4indxHasta = 0;
  }

  void cargarPartitura(String txtIn) { //en js es cargarpartitura y texteDeEntrada2lista...
    String txtLimpio = txtIn.trim().replaceAll("\r", "").replaceAll("\n", "").replaceAll(" +", " ");
    this.textoDeEntrada = txtLimpio.toUpperCase();
    this.EVENTOS = Arrays.asList(txtLimpio.split("\\s+") );
    println("Partitura con "+EVENTOS.size()+" eventos.");
  }

  void compilarPartitura() { //en js es convertir
    compilarPartitura(this.EVENTOS);
  }

  //Compilador codigo Asuar -> secuenciasMusical
  void compilarPartitura(String [] lista) { //eventosAsuarIn //en js es convertir

    String eventoAsuarActual = "";
    int seqsIndex = 0;

    //compilamos cada elemento paso por paso
    for (int i = 0; i < lista.length; i++) {
      println("seqIndx "+seqsIndex);
      //Si el evento contiene una J es un cambio de modo
      if (eventoAsuarActual.indexOf("J") > -1) {

        //el char q viene luego de la 'J' es el numero d modoJindicado
        String modoJindicado = Character.toString(eventoAsuarActual.charAt(eventoAsuarActual.indexOf("J")+1) );
        println("MODO : J"+modoJindicado);

        //acá va toda la chamba de los modos j... harta pega papu


        if (J4_ACTIVE) {  //cambiamos de modo, primero revisamos si j4 está activo

          J4indxHasta = seqsIndex;

          //copia el fragmento
          //J4alt = AsuarSeqNota.slice(J4indxDesde,J4indxHasta+1);
          //J4dur = AsuarSeqDur.slice(J4indxDesde,J4indxHasta+1);
          J4alt = this.AsuarSeqNota.subList(J4indxDesde, J4indxHasta+1);
          J4dur = this.AsuarSeqDur.subList(J4indxDesde, J4indxHasta+1);
          //inserta el fragmento copiado la cantidad de veces indicada
          for ( int rep = 1; rep < J4repeticiones; rep++) {
            for (int inx = 0; inx < J4alt.length; inx++) {

              AsuarSeqNota.set(seqsIndex, J4alt.get(inx) );
              AsuarSeqDur.set(seqsIndex, J4dur.get(inx) );

              seqMidinotes[seqsIndex] = String.valueOf( asuar2MidiNote(this.AsuarSeqNota.get(seqsIndex) ) );
              seqMs[seqsIndex] = String.valueOf( asuar2Ritmo(this.AsuarSeqDur.get(seqsIndex) ) );

              seqsIndex++;
            }
          }
          J4_ACTIVE = false;
          //post ("J4 repitiendo desde "+J4indxDesde+" a "+J4indxHasta);
        } 

        if (modoJindicado == "0") { //MODO 0 NOMRAL - - - - - - - - - - -
          //post("cambiando a modo J0\n");
          JMODO_ACTIVO = 0;
          J2_ACTIVE = false;
          J1_ACTIVE = false;
          continue;
        } else if (modoJindicado == "1") { //modo 1 dur constante - - - - - 

          JMODO_ACTIVO = 1;
          J1duracionConst = lista[i+1];
          J2_ACTIVE = false;
          J1_ACTIVE = true;
          //post("cambiando a modo J1: dur.const.:"+J1duracionConst+"\n");
          i +=1;
          continue;
        } else if (modoJindicado == "2") { //modo 2 alt constante - - - - -

          JMODO_ACTIVO = 2;
          J2_ACTIVE = true;
          J1_ACTIVE = false;

          J2alturaConst  = lista[i+1];

          //post("cambiando a modo J2: altura constante : "+J2alturaConst+"\n");

          i +=1;
          continue;
        } else if (modoJindicado == "4") { //modo 4 rep.segmento - - - - - -

          J4_ACTIVE = true;
          J4repeticiones = parseInt(lista[i+1]);
          J4indxDesde = seqsIndex;
          ArrayList <String> J4alt ;
          ArrayList <String> J4dur ;
          i+= 1;
          continue;
        } else if (modoJindicado == "5") { //modo 5 rep.seccion - - - - - - -

          //JMODO_ACTIVO = 5;
          //LES RESTAMOS 1 PA Q QUEDEN EN NUMEROS CARDINALES 1º 2º
          J5indxDesde = parseInt(lista[i+1])-1;
          J5indxHasta = parseInt(lista[i+2])-1;
          //post("cambiando a modo J5, desde "+J5indxDesde+" hasta "+J5indxHasta+"\n");

          int J5cantidadDeNotasRepetidas =0; 
          String [] J5seqNotas = new String[0]; 
          String [] J5seqDurs = new String[0];
          //calcula segmentos a copiar
          if (J5indxHasta > J5indxDesde) {
            J5cantidadDeNotasRepetidas = J5indxHasta - J5indxDesde;
            //J5seqNotas = seqNotas.slice(J5indxDesde,J5indxHasta+1);
            //J5seqDurs = seqDuraciones.slice(J5indxDesde,J5indxHasta+1);
            //subList(J4indxDesde, J4indxHasta+1);
            J5seqNotas = this.AsuarSeqNota.subList(J5indxDesde, J5indxHasta+1);
            J5seqDurs = this.AsuarSeqDur.subList(J5indxDesde, J5indxHasta+1);
          } else if (J5indxHasta < J5indxDesde) {
            J5cantidadDeNotasRepetidas = J5indxDesde - J5indxHasta;
            //J5seqNotas = seqNotas.slice(J5indxHasta,J5indxDesde+1).reverse();
            //J5seqDurs = seqDuraciones.slice(J5indxHasta,J5indxDesde+1).reverse();  
            J5seqNotas = this.AsuarSeqNota.subList(J5indxDesde, J5indxHasta+1);
            J5seqDurs = this.AsuarSeqDur.subList(J5indxDesde, J5indxHasta+1);
          }
          //post(J5seqNotas+" "+J5seqDurs);

          for (int inx = 0; inx < J5cantidadDeNotasRepetidas; inx++) { // inserta la lista copiada

            this.AsuarSeqNota.set(seqsIndex, J5seqNotas.get(inx) );
            this.AsuarSeqDur.set(seqsIndex, J5seqDurs.get(inx) );

            this.seqMidinotes.set(seqsIndex, String.valueOf( this.asuar2MidiNote(this.AsuarSeqNota[seqsIndex])) );
            this.seqMs.set(seqsIndex, String.valueOf( this.asuar2Ritmo(this.AsuarSeqDur[seqsIndex])) );

            seqsIndex++;
          }
          i += 2;
          continue;
        }

        //FIN DE MODOS J
      }


      //Si el evento no tiene J entonces es un sonido
      if (eventoAsuarActual.indexOf(".")>-1) {
      } else if (JMODO_ACTIVO == 0) {
        println(this.AsuarSeqNota.length);
        this.AsuarSeqNota[seqsIndex] = eventoAsuarActual;
        this.AsuarSeqDur[seqsIndex] = lista[i+1];//;.replace(/\s+/g,' '); //esto tiraba error en web

        //post("j0 "+seqNotas[seqsIndex]+" "+seqDuraciones[seqsIndex] );
        //AsuarSeqDur = seqDuraciones //  seqNotas = AsuarSeqNota
        i++;
        this.seqMidinotes[seqsIndex] = String.valueOf( asuar2MidiNote(this.AsuarSeqNota[seqsIndex]) );
        this.seqMs[seqsIndex] = String.valueOf( asuar2Ritmo(this.AsuarSeqDur[seqsIndex]) );

        seqsIndex++;
      } else if (JMODO_ACTIVO == 1) { // MODO 1 DURACION CONSTANTE

        this.AsuarSeqNota[seqsIndex] = eventoAsuarActual;
        if (this.AsuarSeqNota[seqsIndex].length() == 0) {
          this.AsuarSeqNota[seqsIndex] = this.ultimaAlt;
        }

        this.ultimaAlt = this.AsuarSeqNota[seqsIndex];

        AsuarSeqDur[seqsIndex] = this.J1duracionConst;

        this.seqMidinotes[seqsIndex] = String.valueOf( asuar2MidiNote(this.AsuarSeqNota[seqsIndex]) );
        this.seqMs[seqsIndex] = String.valueOf( asuar2Ritmo(this.AsuarSeqDur[seqsIndex]) );

        seqsIndex++;
      } else if (JMODO_ACTIVO == 2) { //MODO 2 ALTURA CONSTANTE
        this.AsuarSeqDur[seqsIndex] = eventoAsuarActual;
        if ( eventoAsuarActual == "") {
          this.AsuarSeqDur[seqsIndex] = ultimoRit;
        }
        this.ultimoRit = this.AsuarSeqDur[seqsIndex];

        this.AsuarSeqNota[seqsIndex] = this.J2alturaConst;

        this.seqMidinotes[seqsIndex] = String.valueOf( asuar2MidiNote(this.AsuarSeqNota[seqsIndex]) );
        this.seqMs[seqsIndex] = String.valueOf( asuar2Ritmo(this.AsuarSeqDur[seqsIndex]) );

        seqsIndex++;
      }
    }
  }



  float asuar2MidiNote (String cod) {

    if (cod == "") { 
      return this.ultimaNota;
    }

    float calcularNota = 0;

    int octava = 0;
    boolean indicaOct;

    //REGEX para ver si primer caracter indica octava o no
    if ( Character.toString(cod.charAt(0)).matches("\\d+") ) {
      octava = parseInt (Codigo.getOCT( String.valueOf(cod.charAt(0) ) ) );
      indicaOct = true;
    } else { 
      indicaOct= false;
    }

    //4 CASOS DE INTRODUCCIÓN DE ALTURA
    //A) 1 CHAR: NOTA (+OctavaAnterior)
    if ( cod.length() == 1) {     

      calcularNota = parseFloat (Codigo.getNOTA( String.valueOf(cod.charAt(0) ) ) ) + ultimaOct;

      //2 CHARS = 2 OPCIONES
    } else if (cod.length() == 2) { 

      //B) OCTAVA + NOTA
      if (indicaOct) {         
        calcularNota = octava+ parseFloat (Codigo.getNOTA( String.valueOf(cod.charAt(1) ) ) );
        this.ultimaOct = octava;
      } else if (!indicaOct) {     
        //C) NOTA + DUR (+OctavaAnterior)
        calcularNota = parseFloat (Codigo.getNOTA( String.valueOf(cod.charAt(0) ) ) ) + parseFloat (Codigo.getALT( String.valueOf(cod.charAt(1) ) ) );
      }
    } else if ( cod.length() == 3) { 
      //D) 3 CHARS (oct+nota+alt)
      calcularNota = octava+parseFloat (Codigo.getNOTA( String.valueOf(cod.charAt(1) ) ) ) + parseFloat (Codigo.getALT( String.valueOf(cod.charAt(2) ) ) );
      this.ultimaOct = octava;
    }

    this.ultimaNota = calcularNota;
    println(cod+" "+calcularNota);
    return calcularNota;
  }

  float asuar2Ritmo (String cod) {

    if (cod == "") { 
      return ultimoRitmo;
    }

    float calcularRitmo = 0;
    float subdivision = 1;

    for ( int x = 0; x < cod.length(); x++) {

      String caracterActual = (Character.toString(cod.charAt(x)) );
      boolean esInt = caracterActual.matches("\\d+");

      if (esInt) {
        subdivision = parseFloat(Codigo.getGR(caracterActual));
        continue;
      } else if ( caracterActual == "P" ) {
        int caracterAnterior = parseInt(caracterActual)-1;
        calcularRitmo+= parseFloat(Codigo.getDUR( String.valueOf(caracterAnterior) ) ) * .5 * subdivision;
      } else if ( caracterActual != "P" ) {
        float dur =   parseFloat(Codigo.getDUR( caracterActual ) );
        //println(dur+ " dur");
        calcularRitmo+=  dur * subdivision;
      } else {
        println("Error al compilar ritmo: "+cod);
      }
    }

    this.ultimoRitmo = calcularRitmo;    
    return calcularRitmo;
  }
}
